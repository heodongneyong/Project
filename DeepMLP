{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "gpuType": "T4",
      "authorship_tag": "ABX9TyMYRsAhQdbSdMLvRiHTjFoK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/heodongneyong/tensorflow/blob/main/DeepMLP\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.datasets import fashion_mnist\n",
        "\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "(x_train, y_train),(x_test,y_test) = fashion_mnist.load_data()\n",
        "x_train = x_train.reshape(60000,784)\n",
        "x_test = x_test.reshape(10000,784)\n",
        "x_train = x_train/255.0\n",
        "x_test = x_test/255.0\n",
        "y_train = tf.keras.utils.to_categorical(y_train,10)\n",
        "y_test = tf.keras.utils.to_categorical(y_test,10)\n",
        "\n",
        "n_input = 784\n",
        "n_hidden = 1024\n",
        "n_output = 10\n",
        "\n",
        "mlp = Sequential()\n",
        "mlp.add(Dense(units = n_hidden, activation = 'tanh',\n",
        "              input_shape=(n_input,),kernel_initializer = 'random_uniform',bias_initializer='zeros'))\n",
        "mlp.add(Dense(units = n_output, activation = 'tanh', kernel_initializer = 'random_uniform', bias_initializer = 'zeros'))\n",
        "\n",
        "mlp.compile(loss = 'mean_squared_error',optimizer = Adam(learning_rate = 0.001), metrics = ['accuracy'])\n",
        "hist = mlp.fit(x_train,y_train,batch_size = 128, epochs = 30, validation_data = (x_test,y_test), verbose = 2)\n",
        "\n",
        "res = mlp.evaluate(x_test,y_test,verbose = 0)\n",
        "print(\"Accuracy is\",res[1] *100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RTQJ7E5VcMbm",
        "outputId": "efa8e774-9b96-422e-ec42-4a9b5268ac5e"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "29515/29515 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26421880/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "5148/5148 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4422102/4422102 [==============================] - 0s 0us/step\n",
            "Epoch 1/30\n",
            "469/469 - 5s - loss: 0.0850 - accuracy: 0.5387 - val_loss: 0.0377 - val_accuracy: 0.8179 - 5s/epoch - 11ms/step\n",
            "Epoch 2/30\n",
            "469/469 - 2s - loss: 0.0301 - accuracy: 0.8442 - val_loss: 0.0291 - val_accuracy: 0.8395 - 2s/epoch - 4ms/step\n",
            "Epoch 3/30\n",
            "469/469 - 1s - loss: 0.0267 - accuracy: 0.8585 - val_loss: 0.0286 - val_accuracy: 0.8497 - 1s/epoch - 3ms/step\n",
            "Epoch 4/30\n",
            "469/469 - 1s - loss: 0.0253 - accuracy: 0.8674 - val_loss: 0.0265 - val_accuracy: 0.8554 - 1s/epoch - 3ms/step\n",
            "Epoch 5/30\n",
            "469/469 - 1s - loss: 0.0237 - accuracy: 0.8742 - val_loss: 0.0258 - val_accuracy: 0.8602 - 1s/epoch - 3ms/step\n",
            "Epoch 6/30\n",
            "469/469 - 2s - loss: 0.0225 - accuracy: 0.8809 - val_loss: 0.0249 - val_accuracy: 0.8659 - 2s/epoch - 4ms/step\n",
            "Epoch 7/30\n",
            "469/469 - 2s - loss: 0.0219 - accuracy: 0.8848 - val_loss: 0.0229 - val_accuracy: 0.8688 - 2s/epoch - 3ms/step\n",
            "Epoch 8/30\n",
            "469/469 - 1s - loss: 0.0207 - accuracy: 0.8896 - val_loss: 0.0219 - val_accuracy: 0.8747 - 1s/epoch - 3ms/step\n",
            "Epoch 9/30\n",
            "469/469 - 1s - loss: 0.0201 - accuracy: 0.8928 - val_loss: 0.0223 - val_accuracy: 0.8744 - 1s/epoch - 3ms/step\n",
            "Epoch 10/30\n",
            "469/469 - 1s - loss: 0.0196 - accuracy: 0.8961 - val_loss: 0.0219 - val_accuracy: 0.8810 - 1s/epoch - 3ms/step\n",
            "Epoch 11/30\n",
            "469/469 - 1s - loss: 0.0190 - accuracy: 0.9005 - val_loss: 0.0223 - val_accuracy: 0.8766 - 1s/epoch - 3ms/step\n",
            "Epoch 12/30\n",
            "469/469 - 1s - loss: 0.0185 - accuracy: 0.9028 - val_loss: 0.0211 - val_accuracy: 0.8826 - 1s/epoch - 3ms/step\n",
            "Epoch 13/30\n",
            "469/469 - 1s - loss: 0.0183 - accuracy: 0.9057 - val_loss: 0.0204 - val_accuracy: 0.8809 - 1s/epoch - 3ms/step\n",
            "Epoch 14/30\n",
            "469/469 - 1s - loss: 0.0177 - accuracy: 0.9082 - val_loss: 0.0231 - val_accuracy: 0.8774 - 1s/epoch - 3ms/step\n",
            "Epoch 15/30\n",
            "469/469 - 2s - loss: 0.0172 - accuracy: 0.9116 - val_loss: 0.0197 - val_accuracy: 0.8889 - 2s/epoch - 4ms/step\n",
            "Epoch 16/30\n",
            "469/469 - 2s - loss: 0.0169 - accuracy: 0.9145 - val_loss: 0.0213 - val_accuracy: 0.8841 - 2s/epoch - 4ms/step\n",
            "Epoch 17/30\n",
            "469/469 - 1s - loss: 0.0167 - accuracy: 0.9164 - val_loss: 0.0194 - val_accuracy: 0.8871 - 1s/epoch - 3ms/step\n",
            "Epoch 18/30\n",
            "469/469 - 1s - loss: 0.0163 - accuracy: 0.9175 - val_loss: 0.0196 - val_accuracy: 0.8883 - 1s/epoch - 3ms/step\n",
            "Epoch 19/30\n",
            "469/469 - 1s - loss: 0.0158 - accuracy: 0.9216 - val_loss: 0.0208 - val_accuracy: 0.8890 - 1s/epoch - 3ms/step\n",
            "Epoch 20/30\n",
            "469/469 - 1s - loss: 0.0158 - accuracy: 0.9225 - val_loss: 0.0201 - val_accuracy: 0.8908 - 1s/epoch - 3ms/step\n",
            "Epoch 21/30\n",
            "469/469 - 1s - loss: 0.0152 - accuracy: 0.9252 - val_loss: 0.0189 - val_accuracy: 0.8914 - 1s/epoch - 3ms/step\n",
            "Epoch 22/30\n",
            "469/469 - 1s - loss: 0.0151 - accuracy: 0.9269 - val_loss: 0.0193 - val_accuracy: 0.8906 - 1s/epoch - 3ms/step\n",
            "Epoch 23/30\n",
            "469/469 - 2s - loss: 0.0148 - accuracy: 0.9293 - val_loss: 0.0200 - val_accuracy: 0.8919 - 2s/epoch - 3ms/step\n",
            "Epoch 24/30\n",
            "469/469 - 1s - loss: 0.0144 - accuracy: 0.9306 - val_loss: 0.0193 - val_accuracy: 0.8918 - 1s/epoch - 3ms/step\n",
            "Epoch 25/30\n",
            "469/469 - 2s - loss: 0.0144 - accuracy: 0.9330 - val_loss: 0.0197 - val_accuracy: 0.8901 - 2s/epoch - 4ms/step\n",
            "Epoch 26/30\n",
            "469/469 - 1s - loss: 0.0140 - accuracy: 0.9349 - val_loss: 0.0201 - val_accuracy: 0.8922 - 1s/epoch - 3ms/step\n",
            "Epoch 27/30\n",
            "469/469 - 1s - loss: 0.0137 - accuracy: 0.9363 - val_loss: 0.0187 - val_accuracy: 0.8952 - 1s/epoch - 3ms/step\n",
            "Epoch 28/30\n",
            "469/469 - 1s - loss: 0.0136 - accuracy: 0.9367 - val_loss: 0.0204 - val_accuracy: 0.8925 - 1s/epoch - 3ms/step\n",
            "Epoch 29/30\n",
            "469/469 - 1s - loss: 0.0133 - accuracy: 0.9390 - val_loss: 0.0192 - val_accuracy: 0.8911 - 1s/epoch - 3ms/step\n",
            "Epoch 30/30\n",
            "469/469 - 1s - loss: 0.0132 - accuracy: 0.9408 - val_loss: 0.0184 - val_accuracy: 0.8955 - 1s/epoch - 3ms/step\n",
            "Accuracy is 89.55000042915344\n"
          ]
        }
      ]
    }
  ]
}